#------------------------------------------------------------------------------
# Tmux config by Bams (c) 2022
#------------------------------------------------------------------------------

set -g default-command "fish"

# Solve vim background color issues
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",*256color:Tc"

#-- visual annoyance off ------------------------------------------------------
set -g visual-bell      off
set -g visual-silence   off
set -g bell-action      none

#-- settings ------------------------------------------------------------------
set -g display-time 100000     # Messages and indicators timeout
set -g base-index 1            # Windows counts from 1
set -g pane-base-index 1       # Panes counts from 1
set -g renumber-windows on     # Automatically renumber windows on new/delete
set -g history-limit 1000      # Set the maximum number of lines held in window history
set -g escape-time 0           # Set the time in milliseconds for which tmux waits after an
                               # escape is input to determine if it is part of a function or
                               # meta key sequences.  The default is 500 milliseconds ???? WTF ????
set -g repeat-time 600         # Increase repeat timeout
set -g display-panes-time 5000 # Visible indicator of each pane timeout

#-- window --------------------------------------------------------------------
set -g allow-rename     on  # Allow programs in the pane to change the window name
set -g automatic-rename on  # When this setting is enabled, tmux will rename the window automatically
set -g monitor-activity off # Windows with activity are highlighted in the status line
set -g visual-activity  off # Display a message instead of sending a bell

#-- mouse ---------------------------------------------------------------------
set -g mouse on             # Enable mouse support

#-- key bindings --------------------------------------------------------------
unbind -a                   # Remove all default bindings

set -g prefix C-Space       # Prefix key
#bind C-Space send-prefix    # Send prefix for nested sessions

# Reload tmux configuration
bind R source-file $HOME/.config/tmux/tmux.conf \; display-message "Config reloaded"

#-- Visual Selection ----------------------------------------------------------
# Use vi-style key bindings for copy mode
setw -g mode-keys vi
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy y copy-pipe 'xclip -selection clipboard >/dev/null'
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard > /dev/null"

#- [S] - Server ---------------------------------------------------------------
bind "S" switch-client -T "SERVER" \; display-message "SERVER: [x]-Kill"
bind -T "SERVER" "x" confirm-before -p "Kill server? (y/n)" "kill-server"

#- [s] - Session --------------------------------------------------------------
bind "s" switch-client -T "SESSION" \; display-message "SESSION: [n]-New [r]-Rename [d]-Detach [x]-Kill [c]-Choice"
bind -T "SESSION" "n" command-prompt    "new-session -s '%%' -c #{pane_current_path}"
bind -T "SESSION" "r" command-prompt -I "#{session_name}" "rename-session '%%'"
bind -T "SESSION" "d" confirm-before -p "Detach from #S? (y/n)" "detach-client"
bind -T "SESSION" "x" confirm-before -p "Kill session #S? (y/n)" "kill-session"
bind -T "SESSION" "c" choose-session

#- [w] - Window ---------------------------------------------------------------
bind "w" switch-client -T "WINDOW" \; display-message "WINDOW: [n]-New [r]-Rename [s]-Split [v]-Verically [x]-Kill [o]-OKill [c]-Choice"
bind -T "WINDOW" "s" split-window -v -c "#{pane_current_path}"
bind -T "WINDOW" "v" split-window -h -c "#{pane_current_path}"
bind -T "WINDOW" "x" confirm-before -p "Kill current windows? (y/n)" "kill-window"
bind -T "WINDOW" "o" confirm-before -p "Kill other windows? (y/n)" "kill-window -a"
bind -T "WINDOW" "r" command-prompt -I "#{window_name}"  "rename-window '%%'"
bind -T "WINDOW" "c" choose-window

#- [p] - Pane -----------------------------------------------------------------
bind "p" switch-client -T "PANE" \; display-message "PANE: [d]-Panes [j]-Down [k]-Up [o]-OKill [p]-Promote [x]-Kill [z]-Zoom"
bind -T "PANE" "x" kill-pane
bind -T "PANE" "o" kill-pane -a
bind -T "PANE" "z" resize-pane -Z  
bind -T "PANE" "d" display-panes  
bind -T "PANE" "p" swap-pane -s 1  
bind -T "PANE" "j" swap-pane -D  
bind -T "PANE" "k" swap-pane -U  

#- [l] - Layout ---------------------------------------------------------------
bind "l" switch-client -T "LAYOUT" \; display-message "LAYOUT: [t]-Tiled [h]-MHor [v]-MVert [H]-EHor [V]-EVert"
bind -T "LAYOUT" "t" select-layout "tiled"
bind -T "LAYOUT" "h" select-layout "main-horizontal"
bind -T "LAYOUT" "v" select-layout "main-vertical"
bind -T "LAYOUT" "H" select-layout "even-horizontal"
bind -T "LAYOUT" "V" select-layout "even-vertical"

#- [c] - Choice ---------------------------------------------------------------
bind "c" switch-client -T "CHOICE" \; display-message "CHOICE: [t]-tree [s]-session [w]-window [c]-client [b]-buffer"
bind -T "CHOICE" "t" choose-tree
bind -T "CHOICE" "s" choose-session
bind -T "CHOICE" "w" choose-window
bind -T "CHOICE" "c" choose-client
bind -T "CHOICE" "b" choose-buffer

#- [t] - Toggle ---------------------------------------------------------------
bind "t" switch-client -T TOGGLE \; display-message "TOGGLE: s-status"
bind -T TOGGLE s if -F "#{s/off//:status}" "set status off" "set status on"

#- Misc key bindings ----------------------------------------------------------
bind : command-prompt


#------------------------------------------------------------------------------
# navigation

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n "M-h" if-shell "$is_vim" "send-keys M-h" { if -F "#{pane_at_left}"   "" "select-pane -L" }
bind -n "M-j" if-shell "$is_vim" "send-keys M-j" { if -F "#{pane_at_bottom}" "" "select-pane -D" }
bind -n "M-k" if-shell "$is_vim" "send-keys M-k" { if -F "#{pane_at_top}"    "" "select-pane -U" }
bind -n "M-l" if-shell "$is_vim" "send-keys M-l" { if -F "#{pane_at_right}"  "" "select-pane -R" }

# pane sizing
bind -n "M-H" if-shell "$is_vim" "send-keys M-H" "resize-pane -L 1"
bind -n "M-J" if-shell "$is_vim" "send-keys M-J" "resize-pane -D 1"
bind -n "M-K" if-shell "$is_vim" "send-keys M-K" "resize-pane -U 1"
bind -n "M-L" if-shell "$is_vim" "send-keys M-L" "resize-pane -R 1"

bind "b" break-pane
#bind "m" select-pane -m
#bind "M" swap-pane -t

# window navigation
bind -r Tab last-window   # cycle thru MRU tabs
bind -n "M-1" select-window -t 1
bind -n "M-2" select-window -t 2
bind -n "M-3" select-window -t 3
bind -n "M-4" select-window -t 4
bind -n "M-5" select-window -t 5
bind -n "M-6" select-window -t 6
bind -n "M-7" select-window -t 7
bind -n "M-8" select-window -t 8
bind -n "M-9" select-window -t 9
bind -n "M-0" select-window -t 10

set -g status-right "#{?client_prefix,[Prefix]#[default],}"